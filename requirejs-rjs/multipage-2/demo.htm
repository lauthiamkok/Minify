<!doctype html>
<html>
<head>
	<meta charset="utf-8" />

	<title>Compiling A Sub-System With RequireJS</title>

	<link rel="stylesheet" type="text/css" href="./css/demo.css"></link>

	<script type="text/javascript">

		// Default to using the raw modules.
		var appDirectory = "js";

		// Check to see if we have a flag in the URL to use the build
		// modules compiled by RequireJS.
		//
		// NOTE: If I were to move this to production, I would change
		// this whole set of logic with a server-side rendering switch
		// that would check to see if I was on Dev or Production.
		if (/useBuild=true/i.test( location.search )){

			appDirectory = "js-built";

		}

		// Define the attribute and Script source for the RequireJS
		// loader and bootstrap file.
		var srcAttribute = (appDirectory + "/lib/require/require.js");
		var mainAttribute = (appDirectory + "/main.js");
		var tagHtml = (
			"<\script \
				type='text/javascript' \
				src='${src}' \
				data-main='${main}'> \
			<\/script>"
		);

		// Write the RequireJS include to the browser.
		document.write(
			tagHtml
				.replace( "${src}", srcAttribute )
				.replace( "${main}", mainAttribute )
		);

	</script>

</head>
<body>

	<h1>
		Compiling A Sub-System With RequireJS
	</h1>

	<p>
		This is the main page. It contains modules that may never be
		invoked in standard usage. I am experimenting with compiling
		complete sub-systems of detached modules with RequireJS.
	</p>

	<!-- BEGIN: Lazy Loaded Module Sub-System. -->
	<p class="m-help">
		Need help? <a href="#">Check out our FAQs</a>.
	</p>
	<!-- END: Lazy Loaded Module Sub-System. -->

</body>
</html>